
import { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { 
  saveCaffeineEntry, 
  BEVERAGE_CATALOG,
  getUserPreferences,
  formatServingSizeWithUnit
} from "@/utils/caffeineData";
import { Coffee, ArrowLeft } from "lucide-react";
import { useToast } from "@/hooks/use-toast";

const AddCaffeineForm = () => {
  const [selectedBeverage, setSelectedBeverage] = useState("");
  const [notes, setNotes] = useState("");
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [submitError, setSubmitError] = useState<string | null>(null);
  const [unitPreference, setUnitPreference] = useState<"oz" | "ml" | "cup">("oz");
  const navigate = useNavigate();
  const { toast } = useToast();

  useEffect(() => {
    // Load user preferences
    const loadPreferences = async () => {
      try {
        const prefs = await getUserPreferences();
        if (prefs && prefs.unitPreference) {
          setUnitPreference(prefs.unitPreference);
        }
      } catch (error) {
        console.error("Error loading user preferences:", error);
      }
    };
    
    loadPreferences();
  }, []);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!selectedBeverage) return;

    setIsSubmitting(true);
    setSubmitError(null);
    
    try {
      // Find the selected beverage from catalog
      const beverage = BEVERAGE_CATALOG.find(b => b.id === selectedBeverage);
      if (!beverage) {
        setSubmitError("Invalid beverage selected");
        return;
      }
      
      // Create new caffeine entry
      const entry = {
        id: "", // Empty ID, will be generated by Supabase
        beverageId: beverage.id,
        beverageName: beverage.name,
        caffeineAmount: beverage.caffeine,
        servingSize: beverage.servingSize,
        date: new Date().toISOString(),
        notes: notes.trim() || undefined,
      };
      
      // Save the entry
      console.log("Saving caffeine entry:", entry);
      const success = await saveCaffeineEntry(entry);
      
      if (success) {
        // Show success toast
        toast({
          title: "Caffeine logged",
          description: `Added ${beverage.name} with ${beverage.caffeine}mg of caffeine.`,
        });
        
        // Make sure to dispatch the event globally so it can be caught by all components
        window.dispatchEvent(new Event('caffeineDataUpdated'));
        
        console.log("Added new caffeine entry:", entry);
        console.log("Event dispatched: caffeineDataUpdated");
        
        // Navigate back to dashboard
        navigate("/dashboard");
      } else {
        throw new Error("Failed to save entry");
      }
    } catch (error) {
      console.error("Error adding caffeine entry:", error);
      setSubmitError("Failed to save entry. Please try again.");
      toast({
        title: "Error",
        description: "Failed to save caffeine entry. Please try again.",
        variant: "destructive"
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <div className="p-4 space-y-6 pb-20">
      <header className="flex items-center gap-2 mb-6">
        <Button 
          variant="ghost" 
          size="icon"
          onClick={() => navigate("/dashboard")}
          className="h-8 w-8"
        >
          <ArrowLeft className="h-4 w-4" />
        </Button>
        <h1 className="text-2xl font-bold text-coffee-dark">Add Caffeine</h1>
      </header>

      {submitError && (
        <div className="bg-red-50 p-4 rounded-md border border-red-200 text-red-800 mb-4">
          <p>{submitError}</p>
        </div>
      )}

      <Card className="border-coffee/20">
        <CardContent className="pt-6">
          <form onSubmit={handleSubmit} className="space-y-6">
            <div className="space-y-2">
              <Label htmlFor="beverage">Select Beverage</Label>
              <Select
                value={selectedBeverage}
                onValueChange={setSelectedBeverage}
                required
              >
                <SelectTrigger id="beverage" className="w-full">
                  <SelectValue placeholder="Choose a beverage" />
                </SelectTrigger>
                <SelectContent>
                  {BEVERAGE_CATALOG.map((beverage) => (
                    <SelectItem key={beverage.id} value={beverage.id}>
                      <div className="flex items-center">
                        <span>{beverage.name}</span>
                        <span className="text-xs text-muted-foreground ml-2">
                          ({beverage.caffeine}mg)
                        </span>
                      </div>
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
            
            {selectedBeverage && (
              <div className="bg-coffee/5 p-3 rounded-md">
                <div className="flex justify-between">
                  <span className="text-sm">Serving size:</span>
                  <span className="text-sm font-medium">
                    {(() => {
                      const beverage = BEVERAGE_CATALOG.find(b => b.id === selectedBeverage);
                      if (!beverage) return "";
                      return beverage.servingSizeOz
                        ? formatServingSizeWithUnit(beverage, unitPreference)
                        : beverage.servingSize;
                    })()}
                  </span>
                </div>
                <div className="flex justify-between mt-1">
                  <span className="text-sm">Caffeine:</span>
                  <span className="text-sm font-medium">
                    {BEVERAGE_CATALOG.find(b => b.id === selectedBeverage)?.caffeine} mg
                  </span>
                </div>
              </div>
            )}
            
            <div className="space-y-2">
              <Label htmlFor="notes">Notes (optional)</Label>
              <Textarea
                id="notes"
                placeholder="Add any notes about this drink..."
                value={notes}
                onChange={(e) => setNotes(e.target.value)}
                className="resize-none"
                rows={3}
              />
            </div>
            
            <Button 
              type="submit" 
              className="w-full bg-coffee hover:bg-coffee-dark"
              disabled={!selectedBeverage || isSubmitting}
            >
              <Coffee className="mr-2 h-4 w-4" />
              {isSubmitting ? "Logging caffeine..." : "Log Caffeine"}
            </Button>
          </form>
        </CardContent>
      </Card>
    </div>
  );
};

export default AddCaffeineForm;
